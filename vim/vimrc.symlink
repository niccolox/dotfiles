" Vundle and bundle configuration
source ~/.vundlerc

set encoding=utf-8

" Colors
syntax on
syntax enable
set t_Co=256
colorscheme solarized
set background=dark

" Basic
let mapleader = ","
let gmapleader = ","

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase

set gdefault

set incsearch
set hlsearch

" Keep more context when scrolling off the end of a buffer
set scrolloff=3
set title
"set numberwidth=5
set autoindent
set smartindent

set showmode
set showcmd

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Make tab completion for files/buffers act like bash
set wildmenu
set wildmode=list:longest
set wildignore=*.swp,tmp,.git,*.png,*.jpg,*.gif,node_modules

set ttyfast
set ruler
set laststatus=2
set modelines=0
set backspace=indent,eol,start
set history=1000
set visualbell " no bell please
set noerrorbells " shut up
set nowrap
set number
set cmdheight=2				 " Set the command height to 2 lines
set showmatch				 " Highlight closing ), >, }, ], etc...
set undolevels=1000
set directory=/tmp
set nowrap
set textwidth=79

" Formatting
set formatoptions=c                       " Format comments
set formatoptions+=r                      " Continue comments by default
set formatoptions+=l                      " Don't break lines that are already long
set formatoptions+=o                      " Make comment when using o or O from comment line
set formatoptions+=q                      " Format comments with gq
set formatoptions+=n                      " Recognize numbered lists
set formatoptions+=2                      " Use indent from 2nd line of a paragraph
set formatoptions+=1                      " Break before 1-letter words
set textwidth=80                          " Set Where Text Should Auto-Wrap
set autoread 				  " Make sure that buffers change if the file changed

let g:airline_powerline_fonts = 1
let g:airline_detect_modified = 1
let g:airline_detect_paste    = 1
let g:airline_theme           = 'solarized'
let g:airline_exclude_preview = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
  "let g:airline_symbols.branch = "\uf020"
  let g:airline_symbols.branch = '± '
endif

" Display a place holder character for tabs and trailing spaces
set listchars=tab:▸\ ,eol:¬

" Gist
let g:gist_clip_command = 'pbcopy' " Use pbcopy for clipboard
let g:gist_detect_filetype = 1 " Detect filetypes
let g:gist_open_browser_after_post = 1 " Open the gist after posting

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Toggle cursorline
nmap <leader>c :set cursorline!<cr>

" CtrlP configs
map <leader>t :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
" Change the files match to the top of the list
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_max_height = 30
" Open multiple files in no more than 2 vertical splits
let g:ctrlp_open_multiple_files = '2vjr'

" Multi Cursor
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" Plugins
let g:ctrlp_extensions = ['funky']
" Function lookup
map <leader>gf :CtrlPFunky<cr>

" Rails specific CtrlP mappings
map <leader>gs :CtrlP app/assets/stylesheets<cr>
map <leader>gv :CtrlP app/views<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>gt :CtrlP spec<cr>
map <leader>gj :CtrlP app/assets/javascripts<cr>
map <leader>gjm :CtrlP app/assets/javascripts/models<cr>
map <leader>gjc :CtrlP app/assets/javascripts/collections<cr>
map <leader>gjv :CtrlP app/assets/javascripts/views<cr>
map <leader>gjt :CtrlP app/assets/templates<cr>

map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

" Rspec.vim mappings
map <Leader>R :call RunCurrentSpecFile()<cr>
map <Leader>r :call RunNearestSpec()<cr>
map <Leader>l :call RunLastSpec()<cr>
map <Leader>a :call RunAllSpecs()<cr>

command! W :w

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=10
set winminheight=10
set winheight=999

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap jj <ESC>
inoremap II <Esc>I
inoremap AA <Esc>A
inoremap OO <Esc>O
nnoremap / /\v
vnoremap / /\v
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %


" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" fold tag
nnoremap <leader>ft Vatzf
" open .vimrc file
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null

autocmd FocusLost * :wa
autocmd FileType php setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType javascript,html,css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType ruby,pml,eruby,haml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType markdown setlocal wrap linebreak nolist nonu
autocmd BufNewFile,BufRead *.rss setfiletype xml
autocmd BufNewFile,BufRead *.scss setfiletype css.scss
autocmd BufWritePost .vimrc
	\ so $MYVIMRC | call Pl#Load()

" xmpfilter
autocmd FileType ruby,erb,haml nmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml xmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml imap <buffer> <F3> <Plug>(xmpfilter-mark)

autocmd FileType ruby,erb,haml nmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml xmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml imap <buffer> <F4> <Plug>(xmpfilter-run)

if has("autocmd")
  " Enable filetype detection
  filetype plugin indent on
  " Restore cursor position
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif

if &t_Co > 2 || has("gui_running")
  " Enable syntax highlighting
  syntax on
endif

" Surround Plugin config
let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('=')} = "<%= \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r "
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_indent = 1

function! ShowColors()
  let num = 255
  while num >= 0
    exec 'hi col_'.num.' ctermbg='.num.' ctermfg=white'
    exec 'syn match col_'.num.' "ctermbg='.num.':...." containedIn=ALL'
    call append(0, 'ctermbg='.num.':....')
    let num = num - 1
  endwhile
endfunction

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
  " :normal! <<
  " :normal! ilet(:
  " :normal! f 2cl) {
  " :normal! A }
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw

" update to ruby 1.9 hash syntax
let @h='f:xepldf>'
let @g='F:xepldf>'
" Multi Cursor Colors
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
